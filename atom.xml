<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[hshark's blog]]></title>
  <link href="http://hsharkhw.github.io/atom.xml" rel="self"/>
  <link href="http://hsharkhw.github.io/"/>
  <updated>2019-06-06T17:09:46+08:00</updated>
  <id>http://hsharkhw.github.io/</id>
  <author>
    <name><![CDATA[hshark]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[高效内存分配]]></title>
    <link href="http://hsharkhw.github.io/blog/2019/06/06/gao-xiao-nei-cun-fen-pei/"/>
    <updated>2019-06-06T16:19:59+08:00</updated>
    <id>http://hsharkhw.github.io/blog/2019/06/06/gao-xiao-nei-cun-fen-pei</id>
    <content type="html"><![CDATA[<h1>背景</h1>

<p>针对大量小内存分配场景下（例如，企业通讯录，每个用户信息对应一个json node），系统调用malloc/calloc等重复向系统申请内存资源，导致系统性能低下。</p>

<h1>解决方案</h1>

<h2>核心思想</h2>

<p>每次向系统申请固定大小的内存资源，每次用户申请小内存资源时，直接从应用进程已申请的内存资源中获取。</p>

<h2>数据结构</h2>

<p><code>hello world;</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sturct ptr {
</span><span class='line'>    int a;
</span><span class='line'>    int b;
</span><span class='line'>    int c;
</span><span class='line'>    char ptr[0];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>知识点</h2>

<ul>
<li>在结构体内引入指针，实现对特定地址便宜的标记。</li>
<li>由于内存对齐，每个结构体成员变量的大小以及顺序尤其需要关注。</li>
<li>c语言malloc分配的内存地址不能直接赋值给一个c++对象，即malloc与new存在差异性。new操作内部包含以下三个过程：

<ul>
<li>向系统申请内存空间（类似malloc操作，该内存空间可以称之为裸内存）。</li>
<li>将内存空间与对象函数指针列表绑定。</li>
<li>调用对象构造函数，完成对象初始化。</li>
</ul>
</li>
</ul>


<h2>参考文章</h2>

<ul>
<li><a href="https://github.com/acl-dev/acl/">ACL: https://github.com/acl-dev/acl/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于github Pages搭建个人博客]]></title>
    <link href="http://hsharkhw.github.io/blog/2019/06/06/ji-yu-github-pagesda-jian-ge-ren-bo-ke/"/>
    <updated>2019-06-06T16:18:17+08:00</updated>
    <id>http://hsharkhw.github.io/blog/2019/06/06/ji-yu-github-pagesda-jian-ge-ren-bo-ke</id>
    <content type="html"><![CDATA[<h2>环境配置</h2>

<ul>
<li><p>安装ruby</p>

<ul>
<li>安装ruby容易出现问题</li>
</ul>


<pre><code class="`"> brew install ruby
 gem install bundler
 bundle install
 gem env home // 确保gem目录在用户目录而不是系统目录
</code></pre></li>
<li><p>git软件</p>

<ul>
<li>配置ssh-key

<ul>
<li>将本地公钥添加到github，具体位置为：个人头像->setting->ssh and gpg keys。</li>
</ul>
</li>
<li>创建git-pages

<ul>
<li>注意新建的git-pages，必须为username.github.io。</li>
</ul>
</li>
</ul>
</li>
<li>markdown软件

<ul>
<li>mac下推荐使用macdown软件，开源免费。</li>
</ul>
</li>
<li>octopress软件

<ul>
<li>该软件可以认为是对Jekyll的二次封装，进一步方便我们撰写博客，这也是我使用此软件的原因。</li>
<li>安装与使用

<ul>
<li>安装</li>
</ul>


<pre><code class="`"> git clone git://github.com/imathis/octopress.git octopress
 cd octopress
 bundle install
 rake install
</code></pre>

<ul>
<li>使用</li>
</ul>


<pre><code class="`"> rake setup_github_pages 
</code></pre>

<p> 此命令将进行一系列初始化操作：</p>

<pre><code>- 询问github pages的仓库url。
- 将imathis/octopress远程点的名称’origin’修改为’octopress’。
- 加入你的github pages库作为默认的'origin'远程点。
- 切换活动分支从主分支到源分支。
- 根据你的库url配置你的博客url。
- 在_deploy文件夹设置一个master分支用于部署。
</code></pre>

<pre><code class="`"> rake generate
 rake preview // 本地预览，http://localhost:4000
 rake deploy  // 发布静态网页内容到github主分支
 rake new_post["title"] // 添加新的博客
 rake new_page["title"] // 添加新的页面，例如tab
</code></pre>

<p> 如果调用上述命令，出现rake版本不匹配错误，可以通过添加bundle exec rake ***解决。</p></li>
<li>目录结构

<ul>
<li>source目录为相关模版文件；</li>
<li>_deploy目录为根据source目录中相关模块，生成静态文件；</li>
<li>public目录为最终推送到github的文件列表，从_deploy拷贝而来。</li>
</ul>
</li>
<li>源代码提交</li>
</ul>


<pre><code class="`"> git add .
 git commit -m "your message"
 git push origin source
</code></pre>

<p> 上述命令将博客开发源代码提交到github pages仓库source分支。</p></li>
</ul>


<h2>访问统计模块</h2>

<p>clustrmap可以统计网页访问量，并能够在地图显示访问者地理位置分布，访问趋势等。<br>
添加此模块到side需要：</p>

<ul>
<li>在source/_includes/custom/asides/中新建clustrmaps.html文件，文件中添加对clustrmap的调用。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script type="text/javascript" id="clustrmaps" src="//cdn.clustrmaps.com/map_v2.js?u=***"&gt;&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在_config.yml中修改关于asides的设置。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>default_asides: [asides/recent_posts.html, asides/github.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html, custom/asides/clustrmaps.html]</span></code></pre></td></tr></table></div></figure>


<h2>评论模块</h2>

<p>博客主流评论模块，包括，“Disqus”， “多说”等，但是前者是美国的评论系统，国内受限制，无法访问；后者，在国内曾经十分流行，但是目前网站已经停止提供服务。</p>

<p>因此，经过多方对比，在保证可用性的前提下，最终选择了gitalk评论系统。使用该系统，需要进行如下操作：</p>

<ul>
<li>在github申请<code>Client ID</code>和<code>Client Secret</code>两串密钥，并在_config.yml添加对应字段。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>comment_gitalk_clientId: ******                                              
</span><span class='line'>comment_gitalk_clientSecret: ******                                          
</span><span class='line'>comment_gitalk_repo: ***.github.io                                           
</span><span class='line'>github_username: ***                                                         </span></code></pre></td></tr></table></div></figure>


<ul>
<li>在source/_layout/post.html中通过以下代码调用gitalk。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>                                                
</span><span class='line'>  &lt;section&gt;                                                                   
</span><span class='line'>    &lt;h1&gt;Comments&lt;/h1&gt;                                                         
</span><span class='line'>    &lt;!-- Gitalk start --&gt;                                                     
</span><span class='line'>    &lt;div id="gitalk-container"&gt;&lt;/div&gt;                                         
</span><span class='line'>    &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css"&gt;
</span><span class='line'>    &lt;script src="https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js"&gt;&lt;/script&gt;
</span><span class='line'>    &lt;script&gt;                                                                  
</span><span class='line'>        var gitalk  = new Gitalk ({                                           
</span><span class='line'>            id: window.location.pathname,   // Ensure uniqueness and length less than 50
</span><span class='line'>            clientID: '{ {site.comment_gitalk_clientId} }',                   
</span><span class='line'>            clientSecret: '{ {site.comment_gitalk_clientSecret} }',           
</span><span class='line'>            repo: '{ {site.comment_gitalk_repo} }',                           
</span><span class='line'>            owner: '{ {site.github_username} }',                              
</span><span class='line'>            admin: ['{ {site.github_username} }'],                            
</span><span class='line'>                distractionFreeMode: false  // Facebook-like distraction free mode
</span><span class='line'>        })                                                                    
</span><span class='line'>        gitalk.render('gitalk-container')                                     
</span><span class='line'>    &lt;/script&gt;                                                                 
</span><span class='line'>    &lt;!-- Gitalk end --&gt;                                                       
</span><span class='line'>  &lt;/section&gt;                                                                  
</span><span class='line'> </span></code></pre></td></tr></table></div></figure>


<p>其中，<code>comment_gitalk_clientId</code>和<code>comment_gitalk_clientSecret</code>为第一步中申请的两串密钥。</p>

<h1>参考文章</h1>

<ul>
<li><a href="https://aerolith.ink/2018/08/25/Gitalk/">Add Gitalk to Your Jekyll Blog</a></li>
<li><a href="http://www.voidcn.com/article/p-cntpqvhg-bse.html">Commenthub —— 多说、网易云跟帖的替代品</a></li>
<li><a href="http://toughcoder.net/blog/2014/10/16/blogging-like-a-hacker-with-github-pages/">码农的救赎：使用Github Pages搭建博客</a></li>
<li><a href="http://wiki.11ten.net/Knowledge-Management/octopress%EF%BC%8Dblog.html">octopress－blog</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
