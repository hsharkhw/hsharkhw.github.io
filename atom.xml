<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[hshark's blog]]></title>
  <link href="http://hsharkhw.github.io/atom.xml" rel="self"/>
  <link href="http://hsharkhw.github.io/"/>
  <updated>2019-07-22T20:07:19+08:00</updated>
  <id>http://hsharkhw.github.io/</id>
  <author>
    <name><![CDATA[hshark]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[高效内存分配]]></title>
    <link href="http://hsharkhw.github.io/blog/2019/06/06/gao-xiao-nei-cun-fen-pei/"/>
    <updated>2019-06-06T16:19:59+08:00</updated>
    <id>http://hsharkhw.github.io/blog/2019/06/06/gao-xiao-nei-cun-fen-pei</id>
    <content type="html"><![CDATA[<h1 id="part-6542e9f0c8a">背景</h1>

<p>针对大量小内存分配场景下（例如，企业通讯录，每个用户信息对应一个json node），系统调用malloc/calloc等重复向系统申请内存资源，导致系统性能低下。</p>

<!--more-->

<h1 id="part-2e54eaf41ba93e79">解决方案</h1>

<h2 id="part-2ccb2d3d9336ff29">核心思想</h2>

<p>每次向系统申请固定大小的内存资源，每次用户申请小内存资源时，直接从应用进程已申请的内存资源中获取。</p>

<h2 id="part-2c8e0059fc0b13ae">数据结构</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text">sturct ptr {
    int a;
    int b;
    int c;
    char ptr[0];
}
</code></pre></div>
<h2 id="part-3786f3a926bd7af">知识点</h2>

<ul>
<li>在结构体内引入指针，实现对特定地址偏移的标记。</li>
<li>由于内存对齐，每个结构体成员变量的大小以及顺序尤其需要关注。</li>
<li>c语言malloc分配的内存地址不能直接赋值给一个c++对象，即malloc与new存在差异性。new操作内部包含以下三个过程：

<ul>
<li>向系统申请内存空间（类似malloc操作，该内存空间可以称之为裸内存）。</li>
<li>将内存空间与对象函数指针列表绑定。</li>
<li>调用对象构造函数，完成对象初始化。</li>
</ul></li>
</ul>

<h2 id="part-2bb23717e7a4ff3b">参考文章</h2>

<ul>
<li><a href="https://github.com/acl-dev/acl/">ACL: https://github.com/acl-dev/acl/</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于github Pages搭建个人博客]]></title>
    <link href="http://hsharkhw.github.io/blog/2019/06/06/ji-yu-github-pagesda-jian-ge-ren-bo-ke/"/>
    <updated>2019-06-06T16:18:17+08:00</updated>
    <id>http://hsharkhw.github.io/blog/2019/06/06/ji-yu-github-pagesda-jian-ge-ren-bo-ke</id>
    <content type="html"><![CDATA[<p>博客作为一种技术总结以及交流的载体，已经成为大多数码农提升自我，帮助他人的必备平台之一。基于搭建便捷性角度出发，采用github + octopress搭建个人博客，记录相关流程。</p>

<!--more-->

<h2 id="part-2d1b4ea98322a060">环境配置</h2>

<ul>
<li><p>安装ruby<br>
安装ruby容易出现各种问题</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">brew install ruby
gem install bundler
bundle install
gem env home  // 确保gem目录在用户目录而不是系统目录
</code></pre></div></li>
<li><p>git软件</p>

<ul>
<li>配置ssh-key

<ul>
<li>将本地公钥添加到github，具体位置为：个人头像-&gt;setting-&gt;ssh and gpg keys。</li>
</ul></li>
<li>创建git-pages

<ul>
<li>注意新建的git-pages，必须为username.github.io。</li>
</ul></li>
</ul></li>
<li><p>markdown软件</p>

<ul>
<li>mac下推荐使用macdown或者typora软件。</li>
</ul></li>
<li><p>octopress软件</p>

<ul>
<li>该件可以认为是对Jekyll的二次封装，进一步方便我们撰写博客，这也是我使用此软件的原因。</li>
<li><p>安装与使用</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">git clone git://github.com/imathis/octopress.git octopress
cd octopress
bundle install
rake install
</code></pre></div>
<p>安装之后，使用下述命令进行一系列初始化操作：</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">rake setup_github_pages
</code></pre></div>
<ul>
<li>询问GitHub pages的仓库url。</li>
<li>将imathis/octopress远程点的origin修改为octopress。</li>
<li>加入github pages库作为默认的origin远程点。</li>
<li>根据你的库url配置你的博客url。</li>
<li>在_deploy文件夹设置一个master分支用于部署。</li>
</ul>

<!-- -->
<div class="highlight"><pre><code class="language-text" data-lang="text">rake generate
rake preview // 本地预览，http://localhost:4000
rake deploy  // 发布静态网页内容到github主分支
rake new_post[&quot;title&quot;] // 添加新的博客
rake new_page[&quot;title&quot;] // 添加新的页面，例如tab
</code></pre></div>
<p>如果调用上述命令，出现rake版本不匹配错误，可以通过添加bundle exec rake xxx解决。</p>

<!-- -->

<ul>
<li>目录结构

<ul>
<li>source目录为相关模版文件。</li>
<li>_deploy目录为根据source目录中相关模块，生成静态文件。</li>
<li>public目录为最终推送到github的文件列表，从_deploy拷贝而来。</li>
</ul></li>
<li><p>源代码提交</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">git add .
git commit -m &quot;your message&quot;
git push origin source
</code></pre></div>
<p>上述命令将博客开发源代码提交到github pages仓库source分支。 </p></li>
<li><p>新机器上pull代码</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">git clone -b source (url) octopress // 克隆source分支到本地octopress目录，存放着博客源码
cd octopress
git clone (url) _deploy // 克隆master分支到_deploy目录，存放着博客网页内容
gem install bundler
bundle install
rake install
rake setup_github_pages
</code></pre></div>
<p>其中url为博客仓库url。 </p></li>
</ul></li>
</ul></li>
</ul>

<h2 id="part-bcce7b055c785708">访问统计模块</h2>

<p>clustrmap可以统计网页访问量，并能够在地图显示访问者地理位置分布，访问趋势等。 <br>
添加此模块到side需要进行以下配置：</p>

<ul>
<li><p>在source/_includes/custom/asides/中新建clustrmaps.html文件，文件中添加对clustrmap的调用。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;script type=&quot;text/javascript&quot; id=&quot;clustrmaps&quot; src=&quot;//cdn.clustrmaps.com/map_v2.js?u=***&quot;&gt;&lt;/script&gt;
</code></pre></div></li>
<li><p>在_config.yml中修改关于asides的设置。 </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">default_asides: [asides/recent_posts.html, asides/github.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html, custom/asides/clustrmaps.html]
</code></pre></div></li>
</ul>

<h2 id="part-2e7b5b832d162038">评论模块</h2>

<p>博客主流评论模块，包括，“Disqus”， “多说”等，但是前者是美国的评论系统，国内受限制，无法访问；后者，在国内曾经十分流行，但是目前网站已经停止提供服务。 <br>
因此，经过多方对比，在保证可用性的前提下，最终选择了commenthub评论系统。使用该系统，需要进行如下操作： </p>

<ul>
<li>在<a href="https://commenthub.herokuapp.com">commenthub官网</a>申请ID, 并填写博客地址进行绑定。</li>
<li>在_config.yml配置 <code class="prettyprint">commenthub id</code>。</li>
<li><p>在_layouts/post.html中添加一下代码，显示评论模块。</p>

<!-- language: lang-js -->
<div class="highlight"><pre><code class="language-text" data-lang="text">{% if site.commenthub_id and page.comments == true %}
  &lt;section&gt;
      &lt;h1&gt;评论&lt;/h1&gt;
      &lt;div id=&quot;commenthub_thread&quot; aria-live=&quot;polite&quot;&gt;&lt;/div&gt;
  &lt;/section&gt;
{% endif %}

&lt;section&gt;
    &lt;h1&gt;评论&lt;/h1&gt;
    &lt;div id=&quot;commenthub_thread&quot; aria-live=&quot;polite&quot;&gt;&lt;/div&gt;
&lt;/section&gt;
</code></pre></div></li>
<li><p>创建commenthub.html文件</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">{% comment %} Load script if commenthub comments are enabled and &#39;page.comments&#39; is either empty (index) or set to true {% endcomment %}
{% if site.commenthub_id and page.comments != false %}
&lt;script type=&quot;text/javascript&quot;&gt;
    var commenthub_id = &#39;5024203&#39;;
    var commenthub_website = &#39;http://hsharkhw.github.io&#39;;
    var commenthub_identifier = &#39;/blog/2019/06/06/ji-yu-github-pagesda-jian-ge-ren-bo-ke/&#39;;
    var commenthub_url = &#39;http://hsharkhw.github.io/blog/2019/06/06/ji-yu-github-pagesda-jian-ge-ren-bo-ke/&#39;;
    var commenthub_title = &#39;基于github pages搭建个人博客&#39;;
    (function () {
        var dsq = document.createElement(&#39;script&#39;);
        dsq.type = &#39;text/javascript&#39;;
        dsq.async = true;
        dsq.src = &#39;https://commenthub.herokuapp.com/js/embed.js&#39;;
        (document.getElementsByTagName(&#39;head&#39;)[0] || document.getElementsByTagName(&#39;body&#39;)[0]).appendChild(dsq);
    }());
&lt;/script&gt;
{% endif %}
</code></pre></div></li>
<li><p>在_includes/after_foot.html中引入commenthub.html。</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">{% include commenthub.html %} 
</code></pre></div></li>
</ul>

<h1 id="part-2bb23717e7a4ff3b">参考文章</h1>

<ul>
<li><a href="https://aerolith.ink/2018/08/25/Gitalk/">Add Gitalk to Your Jekyll Blog</a></li>
<li><a href="http://www.majiang.life/blog/octopress-and-hexo-comments-widget/">Commenthub —— 多说、网易云跟帖的替代品</a></li>
<li><a href="http://toughcoder.net/blog/2014/10/16/blogging-like-a-hacker-with-github-pages/">码农的救赎：使用Github Pages搭建博客</a></li>
<li><a href="http://wiki.11ten.net/Knowledge-Management/octopress%EF%BC%8Dblog.html">octopress－blog</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
